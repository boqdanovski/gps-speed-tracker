from http.server import BaseHTTPRequestHandler
import json
import os
from datetime import datetime
import pytz
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
DATA_DIR = '/tmp/speed_data'
ALL_DEVICES_FILE = os.path.join(DATA_DIR, 'all_devices.txt')
os.makedirs(DATA_DIR, exist_ok=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def get_moscow_time():
    moscow_tz = pytz.timezone('Europe/Moscow')
    return datetime.now(moscow_tz)

def create_excel_file():
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    try:
        excel_file = os.path.join(DATA_DIR, 'gps_speed_data.xlsx')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if os.path.exists(excel_file):
            from openpyxl import load_workbook
            wb = load_workbook(excel_file)
            ws = wb.active
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            wb = Workbook()
            ws = wb.active
            ws.title = "GPS Speed Data"
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = ["–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "–°–∫–æ—Ä–æ—Å—Ç—å (–∫–º/—á)", "–í—Ä–µ–º—è"]
            for col, header in enumerate(headers, 1):
                cell = ws.cell(row=1, column=col, value=header)
                cell.font = Font(bold=True, color="FFFFFF")
                cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
                cell.alignment = Alignment(horizontal="center")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            ws.column_dimensions['A'].width = 20
            ws.column_dimensions['B'].width = 15
            ws.column_dimensions['C'].width = 12
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        device_files = []
        if os.path.exists(DATA_DIR):
            device_files = [f for f in os.listdir(DATA_DIR) if f.startswith('device_') and f.endswith('.txt') and not f.endswith('_log.txt')]
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
        if ws.max_row > 1:
            for row in range(ws.max_row, 1, -1):
                ws.delete_rows(row)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        row = 2
        for filename in sorted(device_files):
            device_name = filename.replace('device_', '').replace('.txt', '').replace('_', ' ')
            filepath = os.path.join(DATA_DIR, filename)
            
            try:
                with open(filepath, 'r') as f:
                    content = f.read().strip()
                
                lines = content.split('\n')
                if len(lines) >= 2:
                    speed = lines[0]
                    timestamp_str = lines[1]
                    
                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
                    try:
                        dt = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
                        time_only = dt.strftime('%H:%M:%S')
                    except:
                        time_only = timestamp_str
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    ws.cell(row=row, column=1, value=device_name)
                    ws.cell(row=row, column=2, value=float(speed) if speed.replace('.', '').isdigit() else speed)
                    ws.cell(row=row, column=3, value=time_only)
                    
                    row += 1
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        wb.save(excel_file)
        
        print(f"‚úÖ Excel —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {excel_file}")
        return excel_file
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")
        return None

class handler(BaseHTTPRequestHandler):
    def do_POST(self):
        # –ü–æ–ª—É—á–∞–µ–º IP –∫–ª–∏–µ–Ω—Ç–∞
        client_ip = self.headers.get('X-Forwarded-For', 'unknown').split(',')[0].strip()
        if client_ip == 'unknown':
            client_ip = self.headers.get('X-Real-IP', 'unknown')
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        device_name = self.headers.get('X-Device-Name', client_ip)
        safe_name = device_name.replace('.', '_').replace(':', '_').replace(' ', '_')
        device_file = os.path.join(DATA_DIR, f'device_{safe_name}.txt')
        device_log_file = os.path.join(DATA_DIR, f'device_{safe_name}_log.txt')

        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)
        speed_data = post_data.decode('utf-8').strip()

        now = get_moscow_time()
        timestamp = now.strftime('%Y-%m-%d %H:%M:%S')

        print(f'üì• –ü–æ–ª—É—á–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç {device_name} ({client_ip}): {speed_data} –∫–º/—á –≤ {timestamp}')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        with open(device_file, 'w') as f:
            f.write(f"{speed_data}\n{timestamp}")

        with open(device_log_file, 'a') as f:
            f.write(f'{timestamp} - {speed_data} –∫–º/—á\n')

        with open(ALL_DEVICES_FILE, 'a') as f:
            f.write(f'{timestamp} - {device_name} ({client_ip}) - {speed_data} –∫–º/—á\n')

        # –û–±–Ω–æ–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
        try:
            create_excel_file()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Excel: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Cache-Control', 'no-cache, no-store, must-revalidate')
        self.send_header('Pragma', 'no-cache')
        self.send_header('Expires', '0')
        self.end_headers()
        self.wfile.write(f'Speed updated for {device_name}: {speed_data} km/h'.encode())

    def handle_file_download(self):
        try:
            filename = self.path.replace('/download/', '')
            
            # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            allowed_files = [
                'all_devices.txt',
                'GPS-Speed-69F-v3.0-With-Remote-Restart.apk',
                'restart_signal.txt',
                'gps_speed_data.xlsx'
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            if not (filename.startswith('device_') and (filename.endswith('.txt') or filename.endswith('_log.txt'))) and filename not in allowed_files:
                self.send_error(404, "File not found")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            if filename == 'GPS-Speed-69F-v3.0-With-Remote-Restart.apk':
                # APK —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
                filepath = filename
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ DATA_DIR
                filepath = os.path.join(DATA_DIR, filename)
            
            if not os.path.exists(filepath):
                self.send_error(404, "File not found")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if filename.endswith('.apk'):
                content_type = 'application/vnd.android.package-archive'
                # –ß–∏—Ç–∞–µ–º APK –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª
                with open(filepath, 'rb') as f:
                    content = f.read()
            elif filename.endswith('.xlsx'):
                content_type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                # –ß–∏—Ç–∞–µ–º Excel –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª
                with open(filepath, 'rb') as f:
                    content = f.read()
            else:
                content_type = 'text/plain; charset=utf-8'
                # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
                with open(filepath, 'r', encoding='utf-8') as f:
                    content = f.read().encode('utf-8')
            
            self.send_response(200)
            self.send_header('Content-Type', content_type)
            self.send_header('Content-Disposition', f'attachment; filename="{filename}"')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Cache-Control', 'no-cache, no-store, must-revalidate')
            self.send_header('Pragma', 'no-cache')
            self.send_header('Expires', '0')
            self.end_headers()
            self.wfile.write(content)
            
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}')
            self.send_error(500, "Internal server error")

    def handle_cleanup(self):
        try:
            cleaned_files = []
            if os.path.exists(DATA_DIR):
                device_files = [f for f in os.listdir(DATA_DIR) if f.startswith('device_') and f.endswith('.txt') and not f.endswith('_log.txt')]
                
                for filename in device_files:
                    filepath = os.path.join(DATA_DIR, filename)
                    try:
                        os.remove(filepath)
                        cleaned_files.append(filename)
                        
                        log_filename = filename.replace('.txt', '_log.txt')
                        log_filepath = os.path.join(DATA_DIR, log_filename)
                        if os.path.exists(log_filepath):
                            os.remove(log_filepath)
                            cleaned_files.append(log_filename)
                            
                    except Exception as e:
                        print(f'‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}')
            
            if os.path.exists(ALL_DEVICES_FILE):
                with open(ALL_DEVICES_FILE, 'w') as f:
                    f.write('')
                cleaned_files.append('all_devices.txt')
            
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Cache-Control', 'no-cache, no-store, must-revalidate')
            self.send_header('Pragma', 'no-cache')
            self.send_header('Expires', '0')
            self.end_headers()
            
            html = f'''<!DOCTYPE html>
<html><head><title>–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö</title></head>
<body>
<h1>üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h1>
<p>–£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(cleaned_files)}</p>
<p><a href="/">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É</a></p>
</body></html>'''
            
            self.wfile.write(html.encode('utf-8'))
            print(f'üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(cleaned_files)}')
            
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}')
            self.send_error(500, "Internal server error")

    def handle_restart_tracking(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ tracking"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª-—Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            restart_file = os.path.join(DATA_DIR, 'restart_signal.txt')
            with open(restart_file, 'w') as f:
                f.write(f"RESTART_TRACKING\n{get_moscow_time().strftime('%Y-%m-%d %H:%M:%S')}")
            
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Cache-Control', 'no-cache, no-store, must-revalidate')
            self.send_header('Pragma', 'no-cache')
            self.send_header('Expires', '0')
            self.end_headers()
            
            html_content = f'''<!DOCTYPE html>
<html>
<head>
    <title>üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Tracking - 69F –°–ö–û–†–û–°–¢–¨</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body {{ 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
            margin: 0; 
            padding: 20px; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }}
        .container {{
            max-width: 600px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            overflow: hidden;
        }}
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }}
        .content {{
            padding: 30px;
        }}
        .success {{
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }}
        .info {{
            background: #d1ecf1;
            border: 1px solid #bee5eb;
            color: #0c5460;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }}
        .back-link {{
            display: inline-block;
            background: #007bff;
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 5px;
            margin-top: 20px;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Tracking</h1>
            <p>–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º</p>
        </div>
        <div class="content">
            <div class="success">
                ‚úÖ <strong>–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</strong><br>
                –í—Ä–µ–º—è: {get_moscow_time().strftime('%Y-%m-%d %H:%M:%S')} (–ú–°–ö)
            </div>
            
            <div class="info">
                <h3>üì± –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:</h3>
                <ul>
                    <li>–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª-—Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞</li>
                    <li>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è—Ç —ç—Ç–æ—Ç —Ñ–∞–π–ª –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–µ</li>
                    <li>Tracking –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω</li>
                    <li>–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—è–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã</li>
                </ul>
            </div>
            
            <div class="info">
                <h3>üîó –§–∞–π–ª-—Å–∏–≥–Ω–∞–ª:</h3>
                <code>https://gps-speed-tracker.vercel.app/download/restart_signal.txt</code>
            </div>
            
            <a href="/" class="back-link">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É</a>
        </div>
    </div>
</body>
</html>'''
            
            self.wfile.write(html_content.encode('utf-8'))
            print(f'üîÑ –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ {get_moscow_time().strftime("%Y-%m-%d %H:%M:%S")}')
            
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}')
            self.send_error(500, "Internal server error")

    def handle_create_excel(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
            excel_file = create_excel_file()
            
            if excel_file and os.path.exists(excel_file):
                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
                self.send_response(302)
                self.send_header('Location', '/download/gps_speed_data.xlsx')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                print(f'üìä Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é: {excel_file}')
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                self.send_response(200)
                self.send_header('Content-type', 'text/html; charset=utf-8')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                html = f'''<!DOCTYPE html>
<html>
<head>
    <title>‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel - 69F –°–ö–û–†–û–°–¢–¨</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body {{ font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }}
        .container {{ max-width: 600px; margin: 0 auto; background: white; border-radius: 12px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); overflow: hidden; }}
        .header {{ background: linear-gradient(135deg, #dc3545 0%, #c82333 100%); color: white; padding: 30px; text-align: center; }}
        .content {{ padding: 30px; }}
        .error {{ background: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; padding: 15px; border-radius: 8px; margin-bottom: 20px; }}
        .back-link {{ display: inline-block; background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; margin-top: 20px; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel</h1>
            <p>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Excel —Ñ–∞–π–ª</p>
        </div>
        <div class="content">
            <div class="error">
                <strong>–û—à–∏–±–∫–∞:</strong> –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–∫–æ—Ä–æ—Å—Ç–∏.
                <br><br>
                –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
                <ul>
                    <li>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤</li>
                    <li>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤</li>
                    <li>–ü—Ä–æ–±–ª–µ–º—ã —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π openpyxl</li>
                </ul>
            </div>
            <a href="/" class="back-link">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É</a>
        </div>
    </div>
</body>
</html>'''
                
                self.wfile.write(html.encode('utf-8'))
                print(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞')
                
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –≤ handle_create_excel: {e}')
            self.send_error(500, "Internal server error")

    def do_GET(self):
        if self.path.startswith('/download/'):
            self.handle_file_download()
            return
            
        if self.path == '/cleanup':
            self.handle_cleanup()
            return
            
        if self.path == '/restart_tracking':
            self.handle_restart_tracking()
            return
            
        if self.path == '/create_excel':
            self.handle_create_excel()
            return
            
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Cache-Control', 'no-cache, no-store, must-revalidate')
        self.send_header('Pragma', 'no-cache')
        self.send_header('Expires', '0')
        self.end_headers()
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        device_files = []
        if os.path.exists(DATA_DIR):
            device_files = [f for f in os.listdir(DATA_DIR) if f.startswith('device_') and f.endswith('.txt') and not f.endswith('_log.txt')]
        
        devices_html = ""
        if not device_files:
            devices_html = '<div>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.</div>'
        else:
            for filename in sorted(device_files):
                filepath = os.path.join(DATA_DIR, filename)
                try:
                    with open(filepath, 'r') as f:
                        file_content = f.read().strip()
                    
                    # –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (—Å–∫–æ—Ä–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è)
                    lines = file_content.split('\n')
                    if len(lines) >= 2:
                        speed = lines[0]
                        data_timestamp = lines[1]
                    else:
                        speed = file_content
                        data_timestamp = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    device_name = filename.replace('device_', '').replace('.txt', '').replace('_', ' ')
                    safe_name = device_name.replace(' ', '_')
                    
                    current_time = get_moscow_time()
                    last_update_time = datetime.fromtimestamp(os.path.getmtime(filepath), tz=pytz.timezone('Europe/Moscow'))
                    time_diff = (current_time - last_update_time).total_seconds()
                    
                    if time_diff > 10:
                        status_text = "üî¥ Device not Tracking"
                        status_color = "#dc3545"
                        speed_display = "‚Äî"
                    else:
                        status_text = "üü¢ Device Tracking"
                        status_color = "#28a745"
                        speed_display = f"{speed} –∫–º/—á"
                    
                    devices_html += f'''
                    <div style="background: #f8f9fa; border: 1px solid #e9ecef; border-radius: 8px; padding: 20px; margin-bottom: 15px;">
                        <h2>üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_name}</h2>
                        <div style="color: {status_color}; font-weight: bold; margin-bottom: 10px;">{status_text}</div>
                        <div style="font-size: 2em; font-weight: bold; color: #28a745; margin: 10px 0;">{speed_display}</div>
                        <div style="font-size: 0.9em; color: #6c757d; margin: 5px 0;">
                            ‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ: {data_timestamp} (–ú–°–ö)
                        </div>
                        <div style="margin-top: 15px; display: flex; gap: 10px; flex-wrap: wrap;">
                            <a href="/download/device_{safe_name}.txt" style="color: #007bff; text-decoration: none; padding: 8px 12px; background: #e3f2fd; border-radius: 5px; font-size: 0.9em;">üìÑ –¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å</a>
                            <a href="/download/device_{safe_name}_log.txt" style="color: #28a745; text-decoration: none; padding: 8px 12px; background: #e8f5e8; border-radius: 5px; font-size: 0.9em;">üìä –ò—Å—Ç–æ—Ä–∏—è</a>
                        </div>
                        <div style="margin-top: 15px; padding: 10px; background: #fff; border: 1px solid #dee2e6; border-radius: 5px;">
                            <div style="font-size: 0.9em; color: #495057; margin-bottom: 8px;">üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏:</div>
                            <div style="display: flex; gap: 8px; flex-wrap: wrap;">
                                <button onclick="copyToClipboard('https://gps-speed-tracker.vercel.app/download/device_{safe_name}.txt')" 
                                        style="background: #007bff; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 0.8em;">
                                    üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
                                </button>
                                <button onclick="copyToClipboard('https://gps-speed-tracker.vercel.app/download/device_{safe_name}_log.txt')" 
                                        style="background: #28a745; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 0.8em;">
                                    üìä –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é
                                </button>
                            </div>
                        </div>
                    </div>
                    '''
                except Exception as e:
                    devices_html += f'<div>‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filename}: {e}</div>'

        html_content = f'''<!DOCTYPE html>
<html>
<head>
    <title>‚õµ 69F –°–ö–û–†–û–°–¢–¨</title>
    <meta http-equiv="refresh" content="1">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body {{ font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; border-radius: 12px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); overflow: hidden; }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }}
        .content {{ padding: 30px; }}
        .status {{ text-align: center; color: #6c757d; margin-bottom: 20px; }}
    </style>
    <script>
        function copyToClipboard(text) {{
            navigator.clipboard.writeText(text).then(function() {{
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
                const notification = document.createElement('div');
                notification.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: #28a745;
                    color: white;
                    padding: 12px 20px;
                    border-radius: 5px;
                    font-size: 14px;
                    z-index: 1000;
                    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
                `;
                notification.textContent = '‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!';
                document.body.appendChild(notification);
                
                // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {{
                    document.body.removeChild(notification);
                }}, 3000);
            }}).catch(function(err) {{
                console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ', err);
                // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                const textArea = document.createElement('textarea');
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                try {{
                    document.execCommand('copy');
                    alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
                }} catch (err) {{
                    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é: ' + text);
                }}
                document.body.removeChild(textArea);
            }});
        }}
    </script>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚õµ 69F –°–ö–û–†–û–°–¢–¨</h1>
            <p>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤</p>
            <div style="margin-top: 15px;">
                <a href="/cleanup" style="background: rgba(255,255,255,0.2); color: white; padding: 8px 16px; text-decoration: none; border-radius: 5px; font-size: 0.9em; margin-right: 10px;">üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ</a>
                <a href="/restart_tracking" style="background: rgba(255,255,255,0.2); color: white; padding: 8px 16px; text-decoration: none; border-radius: 5px; font-size: 0.9em; margin-right: 10px;">üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Tracking</a>
                <a href="/download/all_devices.txt" style="background: rgba(255,255,255,0.2); color: white; padding: 8px 16px; text-decoration: none; border-radius: 5px; font-size: 0.9em; margin-right: 10px;">üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ</a>
                <a href="/download/GPS-Speed-69F-v3.0-With-Remote-Restart.apk" style="background: rgba(255,255,255,0.2); color: white; padding: 8px 16px; text-decoration: none; border-radius: 5px; font-size: 0.9em;">üì± –°–∫–∞—á–∞—Ç—å APK</a>
            </div>
        </div>
        <div class="content">
            <div class="status">–û–±–Ω–æ–≤–ª–µ–Ω–æ: {get_moscow_time().strftime('%Y-%m-%d %H:%M:%S')} (–ú–°–ö)</div>
            {devices_html}
            
            <div style="background: #f8f9fa; border: 1px solid #e9ecef; border-radius: 8px; padding: 20px; margin-top: 30px;">
                <h2>üìÅ –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã</h2>
                <div style="background: white; padding: 20px; border-radius: 8px;">
                    
                    <!-- APK —Ñ–∞–π–ª -->
                    <div style="margin-bottom: 25px; padding: 15px; background: #e3f2fd; border-radius: 8px; border-left: 4px solid #2196f3;">
                        <h3 style="margin: 0 0 10px 0; color: #1976d2;">üì± Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h3>
                        <p style="margin: 5px 0; color: #666;">GPS Speed 69F v3.0 —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º</p>
                        <a href="/download/GPS-Speed-69F-v3.0-With-Remote-Restart.apk" 
                           style="display: inline-block; background: #2196f3; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; font-weight: bold; margin-right: 10px;">
                            üì• –°–∫–∞—á–∞—Ç—å APK
                        </a>
                        <span style="color: #666; font-size: 0.9em;">–†–∞–∑–º–µ—Ä: 4.7 MB</span>
                    </div>
                    
                    <!-- –û–±—â–∏–π –ª–æ–≥ -->
                    <div style="margin-bottom: 25px; padding: 15px; background: #f3e5f5; border-radius: 8px; border-left: 4px solid #9c27b0;">
                        <h3 style="margin: 0 0 10px 0; color: #7b1fa2;">üìã –û–±—â–∏–π –ª–æ–≥ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤</h3>
                        <p style="margin: 5px 0; color: #666;">–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ</p>
                        <a href="/download/all_devices.txt" 
                           style="display: inline-block; background: #9c27b0; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; font-weight: bold; margin-right: 10px;">
                            üì• –°–∫–∞—á–∞—Ç—å –ª–æ–≥
                        </a>
                        <span style="color: #666; font-size: 0.9em;">–§–æ—Ä–º–∞—Ç: —Ç–µ–∫—Å—Ç</span>
                    </div>
                    
                    <!-- –§–∞–π–ª—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ -->
                    <div style="margin-bottom: 20px;">
                        <h3 style="margin: 0 0 15px 0; color: #2e7d32;">üìä –§–∞–π–ª—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤</h3>
                        {self.get_device_links_html()}
                    </div>
                    
                    <!-- Excel —Ñ–∞–π–ª -->
                    <div style="margin-bottom: 25px; padding: 15px; background: #e8f5e8; border-radius: 8px; border-left: 4px solid #4caf50;">
                        <h3 style="margin: 0 0 10px 0; color: #2e7d32;">üìä Excel –æ—Ç—á–µ—Ç</h3>
                        <p style="margin: 5px 0; color: #666;">Excel —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö</p>
                        <a href="/download/gps_speed_data.xlsx" 
                           style="display: inline-block; background: #4caf50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; font-weight: bold; margin-right: 10px;">
                            üìä –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª
                        </a>
                        <span style="color: #666; font-size: 0.9em;">–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, —Å–∫–æ—Ä–æ—Å—Ç—å, –≤—Ä–µ–º—è (—á–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ü–≤–µ—Ç–æ–≤)</span>
                    </div>
                    
                    <!-- –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã -->
                    <div style="margin-top: 25px; padding: 15px; background: #fff3e0; border-radius: 8px; border-left: 4px solid #ff9800;">
                        <h3 style="margin: 0 0 10px 0; color: #f57c00;">üîß –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã</h3>
                        <div style="margin: 10px 0;">
                            <a href="/download/restart_signal.txt" 
                               style="display: inline-block; background: #ff9800; color: white; padding: 8px 16px; text-decoration: none; border-radius: 5px; font-weight: bold; margin-right: 10px; margin-bottom: 5px;">
                                üîÑ –§–∞–π–ª-—Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                            </a>
                            <span style="color: #666; font-size: 0.9em;">–î–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ tracking</span>
                        </div>
                    </div>
                    
                </div>
            </div>
        </div>
    </div>
</body>
</html>'''
        
        self.wfile.write(html_content.encode('utf-8'))

    def get_device_links_html(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ñ–∞–π–ª—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            device_files = []
            if os.path.exists(DATA_DIR):
                device_files = [f for f in os.listdir(DATA_DIR) if f.startswith('device_') and f.endswith('.txt') and not f.endswith('_log.txt')]

            if not device_files:
                return '<div style="color: #6c757d; font-style: italic; padding: 20px; text-align: center; background: #f8f9fa; border-radius: 5px;">–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤</div>'

            links_html = ""
            for filename in sorted(device_files):
                device_name = filename.replace('device_', '').replace('.txt', '').replace('_', ' ')
                safe_name = device_name.replace(' ', '_')

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                device_file = os.path.join(DATA_DIR, filename)
                log_file = os.path.join(DATA_DIR, f'device_{safe_name}_log.txt')
                
                device_size = os.path.getsize(device_file) if os.path.exists(device_file) else 0
                log_size = os.path.getsize(log_file) if os.path.exists(log_file) else 0

                links_html += f'''
                <div style="margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; border-left: 4px solid #4caf50;">
                    <h4 style="margin: 0 0 10px 0; color: #2e7d32;">üö§ {device_name}</h4>
                    <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                        <a href="/download/device_{safe_name}.txt" 
                           style="display: inline-block; background: #4caf50; color: white; padding: 8px 16px; text-decoration: none; border-radius: 5px; font-weight: bold; font-size: 0.9em;">
                            üìÑ –¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
                        </a>
                        <a href="/download/device_{safe_name}_log.txt" 
                           style="display: inline-block; background: #8bc34a; color: white; padding: 8px 16px; text-decoration: none; border-radius: 5px; font-weight: bold; font-size: 0.9em;">
                            üìä –ò—Å—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö
                        </a>
                    </div>
                    <div style="margin-top: 8px; color: #666; font-size: 0.8em;">
                        –†–∞–∑–º–µ—Ä—ã: —Å–∫–æ—Ä–æ—Å—Ç—å {device_size} –±–∞–π—Ç, –∏—Å—Ç–æ—Ä–∏—è {log_size} –±–∞–π—Ç
                    </div>
                </div>
                '''

            return links_html
        except Exception as e:
            return f'<div style="color: #dc3545; padding: 15px; background: #f8d7da; border-radius: 5px;">–û—à–∏–±–∫–∞: {e}</div>'

    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'POST, GET, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, X-Device-Name')
        self.end_headers()
